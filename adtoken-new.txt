pragma solidity ^0.4.25;

contract Token {
    uint256 public totalSupply;

    function balanceOf(address _owner) public constant returns (uint256 balance);
    
    function transfer(address _to, uint256 _value) public returns (bool success);
    
    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success);

    function approve(address _spender, uint256 _value) public returns (bool success);

    function allowance(address _owner, address _spender) public constant returns (uint256 remaining);

    event Transfer(address indexed _from, address indexed _to, uint256 _value);
    
    event Approval(address indexed _owner, address indexed _spender, uint256 _value);
}

contract AdouToken is Token {
    string public name = "阿斗币"; //名称
    string public symbol = "ADT"; //token简称
    uint8 public decimals = 4; //返回token使用的小数点后几位。如设置为4，表示支持0.0001.
    mapping (address => uint256) balances;
    mapping (address => mapping (address => uint256)) allowed;
    address ownerAddr; //合约创建者地址，保存公开发行代币数量
    address airdropAddr; //合约保留地址，保存空投代币数量（福利、活动发放）

    constructor (address _airdropAddr) public {
        totalSupply = 1000000000 * 10 ** uint256(decimals); //设置初始总量
        balances[msg.sender] = totalSupply * 19 / 20; //初始token数量给予消息发送者(合约创建者)
        balances[_airdropAddr] = totalSupply * 1 / 20; //初始token数量给予保留地址
        ownerAddr = msg.sender;
        airdropAddr = _airdropAddr;
    }
   
    function () public payable {}
    
    modifier isOwnerAddr() { 
        require(msg.sender == ownerAddr);
        _;
    }
    
    function transferEth(address _sender) isOwnerAddr public returns (bool success) {
        require(_sender != 0x0);
        require(ownerAddr.balance > 0);
        require(_sender.send(ownerAddr.balance));
        return true;
    }
    
    function balanceEth(address _owner) public constant returns (uint256 balance) {
        return _owner.balance;
    }
    
    function transfer(address _to, uint256 _value) public returns (bool success) {
        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);
        require(_to != 0x0);
        balances[msg.sender] -= _value;//从消息发送者账户中减去token数量_value
        balances[_to] += _value;//往接收账户增加token数量_value
        emit Transfer(msg.sender, _to, _value);//触发转币交易事件
        return true;
    }

    function transferFrom(address _from, address _to, uint256 _value) public returns (bool success) {
        require(balances[_from] >= _value && allowed[_from][msg.sender] >= _value);
        require(_to != 0x0);
        balances[_to] += _value;//接收账户增加token数量_value
        balances[_from] -= _value; //支出账户_from减去token数量_value
        allowed[_from][msg.sender] -= _value;//消息发送者可以从账户_from中转出的数量减少_value
        emit Transfer(_from, _to, _value);//触发转币交易事件
        return true;
    }
    
    //变更合约保留地址
    function chgAirdropAddr(address _airdropAddr) isOwnerAddr public returns (bool success) {
        require(_airdropAddr != 0x0);
        address oldAddr = airdropAddr;
        airdropAddr = _airdropAddr;
        balances[airdropAddr] = balances[oldAddr]; 
        balances[oldAddr] = 0;
        return true;
    }
    
    //批量空投Token
    function transferBatch(address[] _tos, uint256 _value) isOwnerAddr public returns (bool success) {
        uint256 transferTotal = _value * _tos.length;
        require(balances[airdropAddr] >= transferTotal);
        balances[airdropAddr] -= transferTotal; 
        for(uint i = 0; i < _tos.length; i++){
            if(_tos[i] == 0x0){
                balances[airdropAddr] += _value;
            } else {
                balances[_tos[i]] += _value;
                emit Transfer(airdropAddr, _tos[i], _value);
            }
        }
        return true;
    }
    
    //分配Token到指定地址
    function allocateToken(address _to, uint256 _value) isOwnerAddr public returns (bool success) {
        require(balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]);
        require(_to != 0x0);
        balances[msg.sender] -= _value; 
        balances[_to] += _value;
        emit Transfer(msg.sender, _to, _value);
        return true;
    }
    
    function balanceOf(address _owner) public constant returns (uint256 balance) {
        return balances[_owner];
    }

    function approve(address _spender, uint256 _value) public returns (bool success)   
    { 
        require(_spender != 0x0);
        allowed[msg.sender][_spender] = _value;
        emit Approval(msg.sender, _spender, _value);
        return true;
    }

    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {
        return allowed[_owner][_spender];//允许_spender从_owner中转出的token数
    }
}
